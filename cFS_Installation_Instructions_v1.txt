This guide is based on two main sources:

    https://www.youtube.com/watch?v=IvPioeXbNeE&t=344s
    http://alanstechnotes.blogspot.com/2018/11/how-to-compile-core-flight-system-on.html

This will guide a user to install and run a sample of CFE with OSAL, this version will be one of the earliest releases of both

Instructions:

Preperation
download the following two folders
    https://sourceforge.net/projects/osal/
    https://sourceforge.net/projects/coreflightexec/files/cFE-6.5.0/ (rename to cfe for convenience)

Unzip the folders and copy the contents of OSAL into cfe/osal
move cfe to home folder(just for more convenience when executing commands)

In terminal (not all may be needed)
    $ sudo apt install git
    $ sudo apt install cmake
    $ sudo apt install make
    
Install and Run
type the following commands into terminal
    $ cd cfe
    $ mv build legcy_build
    $ cp -a cfe/cmake/sample_defs .
    $ co cfe/cmake/Makefile.sample Makefile
    
    
The following is a direct copy of the instructions from source
-----------------------------------------------------------------------------------------------------------------------------
    # This example toolchain file describes the cross compiler to use for
# the target architecture indicated in the configuration file.

# In this sample application, the "cross" toolchain is configured to
# simply use the system native compiler with the "m32" switch to output
# 32-bit code on a 64-bit system.  This will not be necessary in
# future revisions.

# Basic cross system configuration
SET(CMAKE_SYSTEM_NAME           Linux)
SET(CMAKE_SYSTEM_VERSION        1)
SET(CMAKE_SYSTEM_PROCESSOR      arm)

# Specify the cross compiler executables
# Typically these would be installed in a home directory or somewhere
# in /opt.  However in this example the system compiler is used.
SET(CMAKE_C_COMPILER            "/usr/bin/gcc")
SET(CMAKE_CXX_COMPILER          "/usr/bin/g++")

# Configure the find commands
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM   NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY   NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE   NEVER)

# These variable settings are specific to cFE/OSAL and determines which
# abstraction layers are built when using this toolchain
SET(CFE_SYSTEM_PSPNAME      "pc-linux")
SET(OSAL_SYSTEM_BSPNAME     "pc-linux")
SET(OSAL_SYSTEM_OSTYPE      "posix")

# This adds the "-m32" flag to all compile commands
# SET(CMAKE_C_FLAGS_INIT "-m32" CACHE STRING "C Flags required by platform")

Next, edit the tools/elf2cfetbl/CMakelists.txt file
You need to comment out the “-m32” switch as below:
------------------------------------------------------------------------------------
# force build as 32-bit
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
add_executable(elf2cfetbl elf2cfetbl.c)

-----------------------------------------------------------------------------------------------------------------------------
End of copy

Resume in terminal
    $ make prep  
Terminal will generate text showing what it is doing (look out for errors, Errors are showin in RED, tasks and warnings are shown in PINK)
    $ make install
Terminal will generate text showing what it is doing (look out for errors, Errors are showin in RED, tasks and warnings are shown in PINK)
   $ cd build/exe/cpu1
For my install the file cfe/build/exe/cpu1/core-cpu1 needed to be renamed as it did not have a file type
  go to cfe/build/exe/cpu1/
  right click core-cpu1
  click on properties
  rename it to include ".bin" at the end ie "core-cpu1.bin"

  $sudo ./core-cpu1.bin
